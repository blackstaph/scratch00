# get_secret.yml
- hosts: localhost
  gather_facts: false
  vars:
    # --- passed via Survey / -e ---
    host: ""                 # FQDN of Safeguard (no scheme)
    api_key: ""              # optional; if empty we resolve via system+account
    system: ""               # required if api_key == ""
    account: ""              # required if api_key == ""
    secret_type: "Password"  # or "PrivateKey"
    header_name: "Authentication"   # your custom header
    validate_certs: true

    # --- vault-provided PEM contents (encrypted) ---
    # These must be defined in a vault file (see below).
    vault_cacert_pem: ""     # full text of CA bundle PEM
    vault_cert_pem: ""       # full text of client certificate PEM
    vault_key_pem: ""        # full text of UNENCRYPTED client key PEM

  tasks:
    - name: create temp dir for cert material
      tempfile:
        state: directory
        prefix: spp_
      register: tmpdir

    - name: write CA bundle
      copy:
        dest: "{{ tmpdir.path }}/ca.pem"
        mode: "0600"
        content: "{{ vault_cacert_pem }}"
      no_log: true

    - name: write client cert
      copy:
        dest: "{{ tmpdir.path }}/cert.pem"
        mode: "0600"
        content: "{{ vault_cert_pem }}"
      no_log: true

    - name: write client key (unencrypted)
      copy:
        dest: "{{ tmpdir.path }}/key.pem"
        mode: "0600"
        content: "{{ vault_key_pem }}"
      no_log: true

    - name: sanity check files exist and are non-empty
      stat:
        path: "{{ item }}"
      loop:
        - "{{ tmpdir.path }}/ca.pem"
        - "{{ tmpdir.path }}/cert.pem"
        - "{{ tmpdir.path }}/key.pem"
      register: cert_stats
      failed_when: cert_stats.results | selectattr('stat.size','gt',0) | list | length != 3
      no_log: true

    # --------- branch A: api_key provided ----------
    - name: get secret via combined plugin (api_key override)
      set_fact:
        spp_secret: >-
          {{ lookup('spp_apikey_authsecret',
                    secret_type,
                    host=host,
                    cacert=tmpdir.path ~ '/ca.pem',
                    cert=tmpdir.path ~ '/cert.pem',
                    key=tmpdir.path ~ '/key.pem',
                    api_key=api_key,
                    header_name=header_name,
                    validate_certs=validate_certs) }}
      when: api_key | length > 0
      no_log: true
      failed_when: spp_secret | length == 0

    # Optional fallback if your combined plugin does NOT accept api_key:
    - name: fallback A2A via uri (only if api_key provided and previous task skipped/failed)
      uri:
        url: "https://{{ host }}/service/a2a/v4/credentials?type={{ secret_type }}"
        method: GET
        headers:
          Accept: application/json
          "{{ header_name }}": "{{ api_key }}"
        client_cert: "{{ tmpdir.path }}/cert.pem"
        client_key:  "{{ tmpdir.path }}/key.pem"
        validate_certs: "{{ validate_certs }}"
        ca_path: "{{ tmpdir.path }}/ca.pem"
        return_content: true
        status_code: [200, 204]
      register: a2a_fallback
      when: api_key | length > 0 and (spp_secret is not defined)
      no_log: true

    - name: set secret from fallback
      set_fact:
        spp_secret: "{{ a2a_fallback.content | default('') }}"
      when: a2a_fallback is defined and a2a_fallback.status == 200
      no_log: true

    # --------- branch B: resolve api_key from system/account ----------
    - name: resolve and fetch secret via combined plugin (discovery â†’ A2A)
      set_fact:
        spp_secret: >-
          {{ lookup('spp_apikey_authsecret',
                    secret_type,
                    host=host,
                    cacert=tmpdir.path ~ '/ca.pem',
                    cert=tmpdir.path ~ '/cert.pem',
                    key=tmpdir.path ~ '/key.pem',
                    system=system,
                    account=account,
                    header_name=header_name,
                    validate_certs=validate_certs) }}
      when: api_key | length == 0
      no_log: true
      failed_when: spp_secret | length == 0

    - name: output (length only)
      debug:
        msg: "secret_len={{ spp_secret | length }}"
      no_log: true

  always:
    - name: remove temp dir
      file:
        path: "{{ tmpdir.path }}"
        state: absent
